#pragma once
namespace clear
{
	enum DiagnosticCode
	{
		DiagnosticCode_None,
		DiagnosticCode_InvalidSyntax,
		DiagnosticCode_DivisionByZero,
		DiagnosticCode_InvalidOperator,
		DiagnosticCode_UnterminatedComment,
		DiagnosticCode_UnterminatedString,
		DiagnosticCode_UnexpectedEOF,
		DiagnosticCode_InvalidNumberLiteral,
		DiagnosticCode_InvalidCharLiteral,
		DiagnosticCode_RedefinedIdentifier,
		DiagnosticCode_UndeclaredIdentifier,
		DiagnosticCode_TypeMismatch,
		DiagnosticCode_InvalidEscapeSequence,
		DiagnosticCode_UnmatchedBracket,
		DiagnosticCode_UnexpectedToken,
		DiagnosticCode_ExpectedIndentation,
		DiagnosticCode_ExpectedNewlineAferIndentation,
		DiagnosticCode_ExpectedIdentifier,
		DiagnosticCode_ExpectedAssignment,
		DiagnosticCode_ElseNotInIfBlock,
		DiagnosticCode_InvalidForLoop,
		DiagnosticCode_ExpectedLeftParanFunctionDefinition,
		DiagnosticCode_ExpectedEndOfFunction,
		DiagnosticCode_ExpectedCommaBetweenFunctionParams,
		DiagnosticCode_ExpectedFunctionReturnType,
		DiagnosticCode_ExpectedEndOfScope,
		DiagnosticCode_ExpectedModuleName,
		DiagnosticCode_ExpectedComma,
		DiagnosticCode_ExpectedColon,
		Diagnostic_Count
	};
	inline const char* g_DiagnosticMessages[] = {
		"An unknown error has occurred.",
		"Syntax error: unexpected or invalid token.",
		"Division by zero is undefined.",
		"Invalid or unsupported operator used.",
		"Unterminated block comment detected.",
		"Unterminated string literal.",
		"Unexpected end of file.",
		"Invalid numeric literal.",
		"Invalid character literal.",
		"Redefinition of identifier.",
		"Use of undeclared identifier.",
		"Type mismatch in assignment or operation.",
		"Invalid escape sequence in string literal.",
		"Unmatched closing or opening bracket.",
		"Unexpected token encountered.",
		"Expected ':' for block indentation",
		"Expected a new line after ':'",
		"Expected an identifier",
		"Expected '=' after identifier",
		"Unexpected 'else' without matching 'if'",
		"Invalid 'for' loop syntax: missing 'in'",
		"Expected '(' after function name",
		"Expected ')' at end of parameter list",
		"Expected ',' between function parameters",
		"Missing '->' for function return type",
		"Expected end of scope (e.g. end of class or function block)",
		"Expected a module name string",
		"Expected ',' between list or argument elements.",
		"Expected ':' after case label or block starter.",
	};
	inline const char* g_DiagnosticAdvices[] = {
		"The issue occurred at {}. Please report this if unexpected.",
		"‘{}’ is not recognized as valid syntax. Check for typos or missing characters.",
		"Ensure the denominator is not zero before performing division.",
		"‘{}’ is not a valid operator in this context. Check the operator or operand types.",
		"Make sure every ‘/*’ has a matching ‘*/’. Comment started near {}.",
		"A string literal starting at ‘{}’ was not closed. Ensure all strings end with a quote.",
		"The file ended prematurely. Check for unclosed brackets, comments, or incomplete statements.",
		"‘{}’ is not a valid number. Ensure correct syntax for integers and decimals.",
		"A character literal starting at ‘{}’ is not valid. Ensure only one character long.",
		"‘{}’ was already defined in this scope. Rename or remove the duplicate declaration.",
		"‘{}’ is not defined in the current scope. Check for typos or missing declarations.",
		"Cannot assign or operate on incompatible types like ‘{}’. Check for implicit casts or incorrect types.",
		"‘{}’ is not a recognized escape sequence. Use sequences like \\n, \\t, \".",
		"There is an unmatched ‘{}’. Check your use of (), {}, and [].",
		"The parser encountered a token it didn't expect. Ensure your syntax follows the language grammar and that all expressions are well-formed.",
		"Add a colon ':' after {} to begin an indented code block",
		"Add a line break after ':' and indent the next line to start the block",
		"Add a valid name or identifier after {}",
		"Assign a value using '=' after the identifier to complete the statement",
		"Ensure 'else' is used directly after a valid 'if' or 'elif' block",
		"Use 'in' to complete the 'for' loop syntax (e.g. 'for item in list')",
		"Add '(' to begin the function’s parameter list",
		"Close the function’s parameter list with ')'",
		"Separate each function parameter with a comma ','",
		"Add '->' followed by the return type after the parameter list",
		"Ensure all indented blocks are properly closed",
		"Add a module name string (e.g. \"math\") after the module keyword",
		"Separate items with a comma ',' at {} to continue the list or argument sequence.",
		"Add a colon ':' after {} to start the block or specify the case body.",
	};
}
