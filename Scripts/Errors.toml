[None]
Message = "An unknown error has occurred."
Advice  = "The issue occurred at {}. Please report this if unexpected."

[InvalidSyntax]
Message = "Syntax error: unexpected or invalid token."
Advice  = "‘{}’ is not recognized as valid syntax. Check for typos or missing characters."

[DivisionByZero]  
Message = "Division by zero is undefined."
Advice  = "Ensure the denominator is not zero before performing division."

[InvalidOperator]
Message = "Invalid or unsupported operator used."
Advice  = "‘{}’ is not a valid operator in this context. Check the operator or operand types."

[UnterminatedComment]
Message = "Unterminated block comment detected."
Advice  = "Make sure every ‘/*’ has a matching ‘*/’. Comment started near {}."

[UnterminatedString]
Message = "Unterminated string literal."
Advice  = "A string literal starting at ‘{}’ was not closed. Ensure all strings end with a quote."

[UnexpectedEOF]
Message = "Unexpected end of file."
Advice  = "The file ended prematurely. Check for unclosed brackets, comments, or incomplete statements."

[InvalidNumberLiteral]
Message = "Invalid numeric literal."
Advice  = "‘{}’ is not a valid number. Ensure correct syntax for integers and decimals."

[InvalidCharLiteral]
Message = "Invalid character literal."
Advice  = "A character literal starting at ‘{}’ is not valid. Ensure only one character long."

[RedefinedIdentifier]
Message = "Redefinition of identifier."
Advice  = "‘{}’ was already defined in this scope. Rename or remove the duplicate declaration."

[UndeclaredIdentifier]
Message = "Use of undeclared identifier."
Advice  = "‘{}’ is not defined in the current scope. Check for typos or missing declarations."

[TypeMismatch]
Message = "Type mismatch in assignment or operation."
Advice  = "Cannot assign or operate on incompatible types like ‘{}’. Check for implicit casts or incorrect types."

[InvalidEscapeSequence]
Message = "Invalid escape sequence in string literal."
Advice  = "‘{}’ is not a recognized escape sequence. Use sequences like \\n, \\t, \\\"."

[UnmatchedBracket]
Message = "Unmatched closing or opening bracket."
Advice  = "There is an unmatched ‘{}’. Check your use of (), {}, and []."

[UnexpectedToken]
Message = "Unexpected token encountered."
Advice  = "The parser encountered a token it didn't expect. Ensure your syntax follows the language grammar and that all expressions are well-formed."

[ExpectedIndentation]
Message = "Expected indentation missing :"
Advice = "Add : after {}"

[ExpectedNewlineAferIndentation]
Message = "Expected new line after :"
Advice = "Add the code into the block after : do not leave it empty"

[ExpectedIdentifier]
Message = "Expected identifier"
Advice = "Add the required indentifer after {}"

[ExpectedAssignment]
Message = "Expected assigmnet after identifier"
Advice = "Add = and complete the statment"

[ElseNotInIfBlock]
Message = "Unexpected else"
Advice = "Make sure else is used in a valid if statment"

[InvalidForLoop]
Message = "For loop missing required in"
Advice = "Add in to complete for expression"

[ExpectedParanFunctionDefinition]
Message = "Expected ( after function name"
Advice = "Add ( after function name"