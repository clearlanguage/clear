[None]
Message = "An unknown error has occurred."
Advice  = "The issue occurred at {}. Please report this if unexpected."

[InvalidSyntax]
Message = "Syntax error: unexpected or invalid token."
Advice  = "‘{}’ is not recognized as valid syntax. Check for typos or missing characters."

[DivisionByZero]  
Message = "Division by zero is undefined."
Advice  = "Ensure the denominator is not zero before performing division."

[InvalidOperator]
Message = "Invalid or unsupported operator used."
Advice  = "‘{}’ is not a valid operator in this context. Check the operator or operand types."

[UnterminatedComment]
Message = "Unterminated block comment detected."
Advice  = "Make sure every ‘/*’ has a matching ‘*/’. Comment started near {}."

[UnterminatedString]
Message = "Unterminated string literal."
Advice  = "A string literal starting at ‘{}’ was not closed. Ensure all strings end with a quote."

[UnexpectedEOF]
Message = "Unexpected end of file."
Advice  = "The file ended prematurely. Check for unclosed brackets, comments, or incomplete statements."

[InvalidNumberLiteral]
Message = "Invalid numeric literal."
Advice  = "‘{}’ is not a valid number. Ensure correct syntax for integers and decimals."

[InvalidCharLiteral]
Message = "Invalid character literal."
Advice  = "A character literal starting at ‘{}’ is not valid. Ensure only one character long."

[RedefinedIdentifier]
Message = "Redefinition of identifier."
Advice  = "‘{}’ was already defined in this scope. Rename or remove the duplicate declaration."

[UndeclaredIdentifier]
Message = "Use of undeclared identifier."
Advice  = "‘{}’ is not defined in the current scope. Check for typos or missing declarations."

[TypeMismatch]
Message = "Type mismatch in assignment or operation."
Advice  = "Cannot assign or operate on incompatible types like ‘{}’. Check for implicit casts or incorrect types."

[InvalidEscapeSequence]
Message = "Invalid escape sequence in string literal."
Advice  = "‘{}’ is not a recognized escape sequence. Use sequences like \n, \t, \"."

[UnmatchedBracket]
Message = "Unmatched closing or opening bracket."
Advice  = "There is an unmatched ‘{}’. Check your use of (), {}, and []."

[UnexpectedToken]
Message = "Unexpected token encountered."
Advice  = "The parser encountered a token it didn't expect. Ensure your syntax follows the language grammar and that all expressions are well-formed."

[ExpectedIndentation]
Message = "Expected ':' for block indentation"
Advice = "Add a colon ':' after {} to begin an indented code block"

[ExpectedNewlineAferIndentation]
Message = "Expected a new line after ':'"
Advice = "Add a line break after ':' and indent the next line to start the block"

[ExpectedIdentifier]
Message = "Expected an identifier"
Advice = "Add a valid name or identifier after {}"

[ExpectedAssignment]
Message = "Expected '=' after identifier"
Advice = "Assign a value using '=' after the identifier to complete the statement"

[ElseNotInIfBlock]
Message = "Unexpected 'else' without matching 'if'"
Advice = "Ensure 'else' is used directly after a valid 'if' or 'elif' block"

[InvalidForLoop]
Message = "Invalid 'for' loop syntax: missing 'in'"
Advice = "Use 'in' to complete the 'for' loop syntax (e.g. 'for item in list')"

[ExpectedLeftParanFunctionDefinition]
Message = "Expected '(' after function name"
Advice = "Add '(' to begin the function’s parameter list"

[ExpectedEndOfFunction]
Message = "Expected ')' at end of parameter list"
Advice = "Close the function’s parameter list with ')'"

[ExpectedCommaBetweenFunctionParams]
Message = "Expected ',' between function parameters"
Advice = "Separate each function parameter with a comma ','"

[ExpectedFunctionReturnType]
Message = "Missing '->' for function return type"
Advice = "Add '->' followed by the return type after the parameter list"

[ExpectedEndOfScope]
Message = "Expected end of scope (e.g. end of class or function block)"
Advice = "Ensure all indented blocks are properly closed"

[ExpectedModuleName]
Message = "Expected a module name string"
Advice = "Add a module name string (e.g. \"math\") after the module keyword"

[ExpectedComma]
Message = "Expected ',' between list or argument elements."
Advice  = "Separate items with a comma ',' at {} to continue the list or argument sequence."

[ExpectedColon]
Message = "Expected ':' after case label or block starter."
Advice  = "Add a colon ':' after {} to start the block or specify the case body."